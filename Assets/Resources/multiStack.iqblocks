{"wrkspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable><variable type=\"broadcast_msg\" id=\"w/Vd1eJ`!)$qBDfB.@nw\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">message1</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"190\" y=\"10\"><next><block type=\"iq_drivetrain_drive\" id=\"eJ~;O]X%0h$Kk|#auucd\"><field name=\"DIRECTION\">fwd</field><next><block type=\"iq_events_broadcast\" id=\"LtC=1pki`hg:I!#LEbD6\"><value name=\"BROADCAST_INPUT\"><shadow type=\"event_broadcast_menu\" id=\";rehe3LnapEcrU-3k(eA\"><field name=\"BROADCAST_OPTION\" id=\"w/Vd1eJ`!)$qBDfB.@nw\" variabletype=\"broadcast_msg\">message1</field></shadow></value></block></next></block></next></block><block type=\"iq_events_when_timer\" id=\"y!^61N$T:~#@1Kc(J(j9\" x=\"490\" y=\"10\"><value name=\"AMOUNT\"><shadow type=\"math_positive_number_only\" id=\"eu@iJc^)h=ai[)FeC|qH\"><field name=\"NUM\">5</field></shadow></value><next><block type=\"iq_motion_stop_driving\" id=\"cy$;3HcY,+OY*RjnKWRu\"><next><block type=\"iq_events_broadcast_and_wait\" id=\"SFuK`U(-aE4A|e[||0y;\"><value name=\"BROADCAST_INPUT\"><shadow type=\"event_broadcast_menu\" id=\"R5|edwKF1_j9E3HJ[]+5\"><field name=\"BROADCAST_OPTION\" id=\"w/Vd1eJ`!)$qBDfB.@nw\" variabletype=\"broadcast_msg\">message1</field></shadow></value></block></next></block></next></block><block type=\"iq_events_when_broadcasted\" id=\"LV1Lxa{Kot])wU|!Kh^q\" x=\"870\" y=\"10\"><field name=\"BROADCAST_OPTION\" id=\"w/Vd1eJ`!)$qBDfB.@nw\" variabletype=\"broadcast_msg\">message1</field><next><block type=\"iq_looks_print\" id=\"th{@%q_[KKD!n!r17b`:\"><value name=\"DATA\"><shadow type=\"text\" id=\"=dVDH1@=Qxo_sY+.6lJe\"><field name=\"TEXT\">Hello</field></shadow></value></block></next></block></xml>","rconfig":[{"port":[1,6,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm"}}],"slot":0,"cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"iq_cpp.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT6, 1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart,200, 173, 76, mm, 1);\n\n//Vision sensor index vars.\nint Vision1_objectIndex = 0;\n\nint Brain_precision;\n\n\n// Generated code.\n\nfloat myVariable;\n\nvex::event message1 = vex::event();\n\nint whenStarted1() {\n  Drivetrain.drive(forward);\n  message1.broadcast();\nreturn 0;\n}\n\nvoid onevent_event_timer_0() {\n  Drivetrain.stop();\n  message1.broadcastAndWait();\n}\n\nvoid onevent_message1_0() {\n  Brain.Screen.print(\"Hello\");\n}\n\n\nint main() {\n\n\n  srand(vex::timer::system());\n\n\n\n  // pre event registration\n  // register event handlers\n  Brain.Timer.event(onevent_event_timer_0,5000);\n  message1(onevent_message1_0);\n\n  task::sleep(15);\n  // post event registration\n\n  // when started blocks...\n\n  whenStarted1();\n  return 0;\n}","cppStatus":"true","platform":"IQ","sdkVersion":"20200120.14.00.00","appVersion":"1.0.9-45","fileFormat":"0.1.0","icon":""}